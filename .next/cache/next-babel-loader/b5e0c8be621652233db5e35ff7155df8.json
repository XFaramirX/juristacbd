{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/jbarrera/Desktop/juristacbd/client/juristacbd/lib/viewer.graphql.tsx\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const ViewerDocument = gql`\n    query Viewer {\n  viewer {\n    id\n    name\n    status\n  }\n}\n    `;\nexport const ViewerComponent = props => __jsx(ApolloReactComponents.Query, _extends({\n  query: ViewerDocument\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}));\n/**\n * __useViewerQuery__\n *\n * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useViewerQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ViewerDocument, baseOptions);\n}\nexport function useViewerLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ViewerDocument, baseOptions);\n}","map":{"version":3,"sources":["/Users/jbarrera/Desktop/juristacbd/client/juristacbd/lib/viewer.graphql.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHooks","ViewerDocument","ViewerComponent","props","useViewerQuery","baseOptions","useQuery","useViewerLazyQuery","useLazyQuery"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,gBAAZ,MAAkC,qBAAlC;AAoCA,OAAO,MAAMC,cAAc,GAAGJ,GAAI;;;;;;;;KAA3B;AAWH,OAAO,MAAMK,eAAe,GAAIC,KAAD,IAC7B,MAAC,qBAAD,CAAuB,KAAvB;AAAgE,EAAA,KAAK,EAAEF;AAAvE,GAA2FE,KAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAKX;;;;;;;;;;;;;;;;AAeA,OAAO,SAASC,cAAT,CAAwBC,WAAxB,EAA4G;AAC3G,SAAOL,gBAAgB,CAACM,QAAjB,CAA6DL,cAA7D,EAA6EI,WAA7E,CAAP;AACD;AACP,OAAO,SAASE,kBAAT,CAA4BF,WAA5B,EAAoH;AACjH,SAAOL,gBAAgB,CAACQ,YAAjB,CAAiEP,cAAjE,EAAiFI,WAAjF,CAAP;AACD","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  viewer: User,\n};\n\nexport type User = {\n   __typename?: 'User',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  status: Scalars['String'],\n};\n\nexport type ViewerQueryVariables = {};\n\n\nexport type ViewerQuery = (\n  { __typename?: 'Query' }\n  & { viewer: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'name' | 'status'>\n  ) }\n);\n\n\nexport const ViewerDocument = gql`\n    query Viewer {\n  viewer {\n    id\n    name\n    status\n  }\n}\n    `;\nexport type ViewerComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ViewerQuery, ViewerQueryVariables>, 'query'>;\n\n    export const ViewerComponent = (props: ViewerComponentProps) => (\n      <ApolloReactComponents.Query<ViewerQuery, ViewerQueryVariables> query={ViewerDocument} {...props} />\n    );\n    \n\n/**\n * __useViewerQuery__\n *\n * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useViewerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n        return ApolloReactHooks.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);\n      }\nexport function useViewerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, baseOptions);\n        }\nexport type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;\nexport type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;\nexport type ViewerQueryResult = ApolloReactCommon.QueryResult<ViewerQuery, ViewerQueryVariables>;"]},"metadata":{},"sourceType":"module"}