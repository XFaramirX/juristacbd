{"ast":null,"code":"var _jsxFileName = \"/Users/jbarrera/Desktop/juristacbd/client/juristacbd/pages/about.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\nconst link = createHttpLink({\n  uri: \"http://localhost:7000/graphql\",\n  fetch: fetch\n});\nconst cache = new InMemoryCache();\nconst client = new ApolloClient({\n  cache,\n  link\n});\nclient.query({\n  query: gql`\n      query GetLaunch {\n        users {\n          id\n          name\n        }\n      }\n    `\n}).then(result => console.log(result));\nconst GET_USERS = gql`\n  {\n    users {\n      id\n      name\n    }\n  }\n`;\n\nconst ExchangeRates = () => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_USERS);\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Error :(\");\n  return data.rates.map(({\n    id,\n    name\n  }) => __jsx(\"div\", {\n    key: id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, name, \": \", id)));\n};\n\nexport default ExchangeRates;","map":{"version":3,"sources":["/Users/jbarrera/Desktop/juristacbd/client/juristacbd/pages/about.tsx"],"names":["ApolloClient","InMemoryCache","useQuery","gql","fetch","createHttpLink","link","uri","cache","client","query","then","result","console","log","GET_USERS","ExchangeRates","loading","error","data","rates","map","id","name"],"mappings":";;;AACA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AAGA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,MAAMC,IAAI,GAAGD,cAAc,CAAC;AAC1BE,EAAAA,GAAG,EAAE,+BADqB;AAE1BH,EAAAA,KAAK,EAAEA;AAFmB,CAAD,CAA3B;AAIA,MAAMI,KAAK,GAAG,IAAIP,aAAJ,EAAd;AAEA,MAAMQ,MAA2C,GAAG,IAAIT,YAAJ,CAAiB;AACnEQ,EAAAA,KADmE;AAEnEF,EAAAA;AAFmE,CAAjB,CAApD;AAKAG,MAAM,CACHC,KADH,CACS;AACLA,EAAAA,KAAK,EAAEP,GAAI;;;;;;;;AADN,CADT,EAWGQ,IAXH,CAWQC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAXlB;AAaA,MAAMG,SAAS,GAAGZ,GAAI;;;;;;;CAAtB;;AAQA,MAAMa,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BjB,QAAQ,CAACa,SAAD,CAAzC;AAEA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,GAAD,KACpB;AAAK,IAAA,GAAG,EAAED,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IADH,QACWD,EADX,CADF,CADK,CAAP;AAOD,CAbD;;AAeA,eAAeN,aAAf","sourcesContent":["import Link from \"next/link\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({\n  uri: \"http://localhost:7000/graphql\",\n  fetch: fetch as any\n});\nconst cache = new InMemoryCache();\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link\n});\n\nclient\n  .query({\n    query: gql`\n      query GetLaunch {\n        users {\n          id\n          name\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\nconst GET_USERS = gql`\n  {\n    users {\n      id\n      name\n    }\n  }\n`;\nconst ExchangeRates = () => {\n  const { loading, error, data } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.rates.map(({ id, name }: { id: any; name: any }) => (\n    <div key={id}>\n      <p>\n        {name}: {id}\n      </p>\n    </div>\n  ));\n};\n\nexport default ExchangeRates;\n"]},"metadata":{},"sourceType":"module"}