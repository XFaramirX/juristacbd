{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jbarrera/Desktop/juristacbd/client/juristacbd/pages/about.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    users {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query GetLaunch {\\n        users {\\n          id\\n          name\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\nvar link = createHttpLink({\n  uri: \"http://localhost:7000/graphql\",\n  fetch: fetch\n});\nvar cache = new InMemoryCache();\nvar client = new ApolloClient({\n  cache: cache,\n  link: link\n});\nclient.query({\n  query: gql(_templateObject())\n}).then(function (result) {\n  return console.log(result);\n});\nvar GET_USERS = gql(_templateObject2());\n\nvar ExchangeRates = function ExchangeRates() {\n  var _useQuery = useQuery(GET_USERS),\n      client = _useQuery.client,\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Error :(\");\n  return data.rates.map(function (_ref) {\n    var id = _ref.id,\n        name = _ref.name;\n    return __jsx(\"div\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, name, \": \", id));\n  });\n};\n\nexport default ExchangeRates;","map":{"version":3,"sources":["/Users/jbarrera/Desktop/juristacbd/client/juristacbd/pages/about.tsx"],"names":["ApolloClient","InMemoryCache","useQuery","gql","fetch","createHttpLink","link","uri","cache","client","query","then","result","console","log","GET_USERS","ExchangeRates","loading","error","data","rates","map","id","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,IAAMC,IAAI,GAAGD,cAAc,CAAC;AAC1BE,EAAAA,GAAG,EAAE,+BADqB;AAE1BH,EAAAA,KAAK,EAAEA;AAFmB,CAAD,CAA3B;AAIA,IAAMI,KAAK,GAAG,IAAIP,aAAJ,EAAd;AAEA,IAAMQ,MAA2C,GAAG,IAAIT,YAAJ,CAAiB;AACnEQ,EAAAA,KAAK,EAALA,KADmE;AAEnEF,EAAAA,IAAI,EAAJA;AAFmE,CAAjB,CAApD;AAKAG,MAAM,CACHC,KADH,CACS;AACLA,EAAAA,KAAK,EAAEP,GAAF;AADA,CADT,EAWGQ,IAXH,CAWQ,UAAAC,MAAM;AAAA,SAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,CAXd;AAaA,IAAMG,SAAS,GAAGZ,GAAH,oBAAf;;AAQA,IAAMa,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,kBACed,QAAQ,CAACa,SAAD,CADvB;AAAA,MAClBN,MADkB,aAClBA,MADkB;AAAA,MACVQ,OADU,aACVA,OADU;AAAA,MACDC,KADC,aACDA,KADC;AAAA,MACMC,IADN,aACMA,IADN;;AAG1B,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe;AAAA,QAAGC,EAAH,QAAGA,EAAH;AAAA,QAAOC,IAAP,QAAOA,IAAP;AAAA,WACpB;AAAK,MAAA,GAAG,EAAED,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,IADH,QACWD,EADX,CADF,CADoB;AAAA,GAAf,CAAP;AAOD,CAbD;;AAeA,eAAeN,aAAf","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\n\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({\n  uri: \"http://localhost:7000/graphql\",\n  fetch: fetch as any\n});\nconst cache = new InMemoryCache();\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link\n});\n\nclient\n  .query({\n    query: gql`\n      query GetLaunch {\n        users {\n          id\n          name\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\nconst GET_USERS = gql`\n  {\n    users {\n      id\n      name\n    }\n  }\n`;\nconst ExchangeRates = () => {\n  const { client, loading, error, data } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.rates.map(({ id, name }: { id: any; name: any }) => (\n    <div key={id}>\n      <p>\n        {name}: {id}\n      </p>\n    </div>\n  ));\n};\n\nexport default ExchangeRates;\n"]},"metadata":{},"sourceType":"module"}