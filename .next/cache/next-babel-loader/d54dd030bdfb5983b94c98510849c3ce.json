{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport const ViewerDocument = gql`\n    query Viewer {\n  viewer {\n    id\n    name\n    status\n  }\n}\n    `;\nexport const ViewerComponent = props => __jsx(ApolloReactComponents.Query, _extends({\n  query: ViewerDocument\n}, props));\n/**\n * __useViewerQuery__\n *\n * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.\n * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useViewerQuery({\n *   variables: {\n *   },\n * });\n */\n\nexport function useViewerQuery(baseOptions) {\n  return ApolloReactHooks.useQuery(ViewerDocument, baseOptions);\n}\nexport function useViewerLazyQuery(baseOptions) {\n  return ApolloReactHooks.useLazyQuery(ViewerDocument, baseOptions);\n}","map":null,"metadata":{},"sourceType":"module"}