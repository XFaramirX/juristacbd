{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/jbarrera/Desktop/juristacbd/client/juristacbd-app/lib/with-apollo.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nlet globalApolloClient;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n */\n\nexport default function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = apolloClient || initApolloClient(apolloState);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (true) {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 83\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState);\n  }\n\n  return globalApolloClient;\n}\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\n\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = true;\n  const cache = new InMemoryCache().restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache\n  });\n}\n\nfunction createIsomorphLink() {\n  if (true) {\n    const {\n      SchemaLink\n    } = require('apollo-link-schema');\n\n    const schema = require('./schema').default;\n\n    return new SchemaLink({\n      schema\n    });\n  } else {\n    const {\n      HttpLink\n    } = require('apollo-link-http');\n\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin'\n    });\n  }\n}","map":{"version":3,"sources":["/Users/jbarrera/Desktop/juristacbd/client/juristacbd-app/lib/with-apollo.tsx"],"names":["React","Head","ApolloProvider","ApolloClient","InMemoryCache","globalApolloClient","withApollo","PageComponent","ssr","WithApollo","apolloClient","apolloState","pageProps","client","initApolloClient","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","ssrMode","restore","link","createIsomorphLink","SchemaLink","require","schema","default","HttpLink","uri","credentials"],"mappings":"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","sourcesContent":["import { NextPage, NextPageContext } from 'next'\nimport React from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory'\n\ntype TApolloClient = ApolloClient<NormalizedCacheObject>\n\ntype InitialProps = {\n  apolloClient: TApolloClient\n  apolloState: any\n} & Record<string, any>\n\ntype WithApolloPageContext = {\n  apolloClient: TApolloClient\n} & NextPageContext\n\nlet globalApolloClient: TApolloClient\n\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n */\nexport default function withApollo(\n  PageComponent: NextPage,\n  { ssr = true } = {}\n) {\n  const WithApollo = ({\n    apolloClient,\n    apolloState,\n    ...pageProps\n  }: InitialProps) => {\n    const client = apolloClient || initApolloClient(apolloState)\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async (ctx: WithApolloPageContext) => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient())\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient,\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState,\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient(initialState?: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!globalApolloClient) {\n    globalApolloClient = createApolloClient(initialState)\n  }\n\n  return globalApolloClient\n}\n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient(initialState = {}) {\n  const ssrMode = typeof window === 'undefined'\n  const cache = new InMemoryCache().restore(initialState)\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode,\n    link: createIsomorphLink(),\n    cache,\n  })\n}\n\nfunction createIsomorphLink() {\n  if (typeof window === 'undefined') {\n    const { SchemaLink } = require('apollo-link-schema')\n    const schema = require('./schema').default\n    return new SchemaLink({ schema })\n  } else {\n    const { HttpLink } = require('apollo-link-http')\n    return new HttpLink({\n      uri: '/api/graphql',\n      credentials: 'same-origin',\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}