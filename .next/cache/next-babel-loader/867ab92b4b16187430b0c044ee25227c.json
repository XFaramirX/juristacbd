{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/jbarrera/Desktop/juristacbd/client/juristacbd/pages/about.tsx\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  {\\n    users {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query GetLaunch {\\n        users {\\n          id\\n          name\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from \"next/link\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\nvar link = createHttpLink({\n  uri: \"http://localhost:7000/graphql\",\n  fetch: fetch\n});\nvar cache = new InMemoryCache();\nvar client = new ApolloClient({\n  cache: cache,\n  link: link\n});\nclient.query({\n  query: gql(_templateObject())\n}).then(function (result) {\n  return console.log(result);\n});\nvar GET_USERS = gql(_templateObject2());\n\nfunction ExchangeRates() {\n  var _useQuery = useQuery(GET_USERS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Error :(\");\n  return data.rates.map(function (_ref) {\n    var id = _ref.id,\n        name = _ref.name;\n    return __jsx(\"div\", {\n      key: id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, name, \": \", id));\n  });\n}\n\nExchangeRates();\nexport default (function () {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"This is a static page goto\", \" \", __jsx(Link, {\n    href: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"dynamic\")), \" \", \"page.\", __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, __jsx(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"test\"), \",\"), __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Hola Mundo!\"));\n});","map":{"version":3,"sources":["/Users/jbarrera/Desktop/juristacbd/client/juristacbd/pages/about.tsx"],"names":["Link","ApolloClient","InMemoryCache","ApolloProvider","React","Button","useQuery","gql","fetch","createHttpLink","link","uri","cache","client","query","then","result","console","log","GET_USERS","ExchangeRates","loading","error","data","rates","map","id","name"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAAqD,uBAArD;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,IAAMC,IAAI,GAAGD,cAAc,CAAC;AAC1BE,EAAAA,GAAG,EAAE,+BADqB;AAE1BH,EAAAA,KAAK,EAAEA;AAFmB,CAAD,CAA3B;AAIA,IAAMI,KAAK,GAAG,IAAIV,aAAJ,EAAd;AAEA,IAAMW,MAA2C,GAAG,IAAIZ,YAAJ,CAAiB;AACnEW,EAAAA,KAAK,EAALA,KADmE;AAEnEF,EAAAA,IAAI,EAAJA;AAFmE,CAAjB,CAApD;AAKAG,MAAM,CACHC,KADH,CACS;AACLA,EAAAA,KAAK,EAAEP,GAAF;AADA,CADT,EAWGQ,IAXH,CAWQ,UAAAC,MAAM;AAAA,SAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAJ;AAAA,CAXd;AAaA,IAAMG,SAAS,GAAGZ,GAAH,oBAAf;;AAQA,SAASa,aAAT,GAAyB;AAAA,kBACUd,QAAQ,CAACa,SAAD,CADlB;AAAA,MACfE,OADe,aACfA,OADe;AAAA,MACNC,KADM,aACNA,KADM;AAAA,MACCC,IADD,aACCA,IADD;;AAGvB,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP;AAEX,SAAOC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe;AAAA,QAAGC,EAAH,QAAGA,EAAH;AAAA,QAAOC,IAAP,QAAOA,IAAP;AAAA,WACpB;AAAK,MAAA,GAAG,EAAED,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,IADH,QACWD,EADX,CADF,CADoB;AAAA,GAAf,CAAP;AAOD;;AACDN,aAAa;AACb,gBAAe;AAAA,SACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC6B,GAD7B,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CAFF,EAIU,GAJV,WAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEP,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,MANF,EASE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,KAAK,EAAC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF,CADa;AAAA,CAAf","sourcesContent":["import Link from \"next/link\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\nimport fetch from \"node-fetch\";\nimport { createHttpLink } from \"apollo-link-http\";\n\nconst link = createHttpLink({\n  uri: \"http://localhost:7000/graphql\",\n  fetch: fetch as any\n});\nconst cache = new InMemoryCache();\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  link\n});\n\nclient\n  .query({\n    query: gql`\n      query GetLaunch {\n        users {\n          id\n          name\n        }\n      }\n    `\n  })\n  .then(result => console.log(result));\n\nconst GET_USERS = gql`\n  {\n    users {\n      id\n      name\n    }\n  }\n`;\nfunction ExchangeRates() {\n  const { loading, error, data } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return data.rates.map(({ id, name }: { id: any; name: any }) => (\n    <div key={id}>\n      <p>\n        {name}: {id}\n      </p>\n    </div>\n  ));\n}\nExchangeRates();\nexport default () => (\n  <div>\n    This is a static page goto{\" \"}\n    <Link href=\"/\">\n      <a>dynamic</a>\n    </Link>{\" \"}\n    page.\n    <p>\n      <ApolloProvider client={client}>test</ApolloProvider>,\n    </p>\n    <Button variant=\"contained\" color=\"primary\">\n      Hola Mundo!\n    </Button>\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}